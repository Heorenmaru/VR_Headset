/*
 *
 *  Created on: Mar 16, 2022
 *      Author: Heorenmaru
 */

#include "kernel.h"

#define DEVICE_CODE 0x0000U
#define DEVICE_VER 	0x00U

/////////////////////////////////////////////////////////////////////////////////
// HANDLERS and VARS
/////////////////////////////////////////////////////////////////////////////////

extern I2C_HandleTypeDef hi2c1;

//uint16_t adc_data[9 * 8] = { 0 };

#define T_TIMEOUT  1
#define T_OK 0

uint8_t devaddr = 0x0F;

uint8_t DisplayStarted = 0;
uint8_t LostSignal = 0;


uint8_t edid_double[]={
		/*1080x1200*/
		//		 EDID Header
		0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,
		//		ID Manufacturer Name
		0x4e, 0xd2,
		//		ID Product Code
		0x19, 0x10,
		//		ID Serial Number
		0x00, 0x00, 0x00, 0x00,
		//		Week of Manufacture or Model Year Flag
		0x0C, 0x1B,
		//		EDID Structure Version and Revision Numbers
		0x01, 0x03,

		0x80, 0x00, 0x00, 0x78, 0x0A, 0x07, 0xF5, 0x9A, 0x56, 0x4E, 0x86, 0x26,
					 	0x1E, 0x50, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x39, 0x38, 0x13, 0x41, 0xB0, 0x0C, 0x40, 0x64, 0x05,
						0x63, 0x00, 0x5A, 0xA0, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x59, 0x6F, 0x6E,
						0x73, 0x69, 0x63, 0x73, 0x20, 0x48, 0x44, 0x4B, 0x32, 0x0A, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x30,
						0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0xFD,
						0x00, 0x17, 0x4B, 0x0F, 0xF0, 0x22, 0x00, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x01, 0x15,
						0x02, 0x03, 0x17, 0x74, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x09, 0x7F, 0x07,
						0x66, 0x03, 0x0C, 0x00, 0x30, 0x00, 0x80, 0xBC, 0x39, 0x38, 0x13, 0x41, 0xB0, 0x0C, 0x40, 0x64,
						0x05, 0x63, 0x00, 0x5A, 0xA0, 0x00, 0x00, 0x00, 0x18, 0xBC, 0x39, 0x38, 0x13, 0x41, 0xB0, 0x0C,
						0x40, 0x64, 0x05, 0x63, 0x00, 0x5A, 0xA0, 0x00, 0x00, 0x00, 0x18, 0xBC, 0x39, 0x38, 0x13, 0x41,
						0xB0, 0x0C, 0x40, 0x64, 0x05, 0x63, 0x00, 0x5A, 0xA0, 0x00, 0x00, 0x00, 0x18, 0xBC, 0x39, 0x38,
						0x13, 0x41, 0xB0, 0x0C, 0x40, 0x64, 0x05, 0x63, 0x00, 0x5A, 0xA0, 0x00, 0x00, 0x00, 0x18, 0xBC,
						0x39, 0x38, 0x13, 0x41, 0xB0, 0x0C, 0x40, 0x64, 0x05, 0x63, 0x00, 0x5A, 0xA0, 0x00, 0x00, 0x00,
						0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8B };


/////////////////////////////////////////////////////////////////////////////////
// USB Receive logic
/////////////////////////////////////////////////////////////////////////////////



void usb_callback(uint8_t *arr, uint16_t len){



	////////////
	// DEV INFO
	// (STANDART COMMAND)
	if(arr[0] == 0 ){

		uint16_t *idBase0 = (uint16_t*)(UID_BASE);
		uint16_t *idBase1 = (uint16_t*)(UID_BASE + 0x02);
		uint32_t *idBase2 = (uint32_t*)(UID_BASE + 0x04);
		uint32_t *idBase3 = (uint32_t*)(UID_BASE + 0x08);

		usb_rst_cursor();
		usb_add_uint8(0x00);
		usb_add_uint16(idBase0);
		usb_add_uint16(idBase1);
		usb_add_uint32(idBase2);
		usb_add_uint32(idBase3);

		usb_add_uint16((uint8_t)DEVICE_CODE);
		usb_add_uint8((uint8_t)DEVICE_VER);

		usb_send_buff();

	}


	////////////////RFM SETTINGS
	if(arr[0] == 1 ){



//
//		HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 0);
//		HAL_ADC_Start_DMA(&hadc, (uint32_t*)&adc_data, 9*8);
//
		usb_rst_cursor();
		usb_add_uint8(0x01);
		usb_add_uint8(0);

		usb_send_buff();
	}


}



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{

    if(hadc->Instance == ADC1)
    {
        HAL_ADC_Stop_DMA(hadc); // это необязательно
        calc_voltage();

    }
}



void err_handle(){
	while(1){
		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, 1);
		HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, 1);
		HAL_Delay(50);
		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, 0);
		HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, 0);
		HAL_Delay(300);
		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, 1);
		HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, 1);
		HAL_Delay(50);
		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, 0);
		HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, 0);
		HAL_Delay(1000);

	}
}
void i2c_write(uint8_t addr, uint16_t reg, uint32_t dat, uint8_t len){

	//HAL_I2C_Mem_Write(&hi2c1,  (addr<<1) | 0b1, reg, 2, dat, 2, 100);
	if(HAL_I2C_Mem_Write(&hi2c1,  (addr<<1) | 0b0, reg, 2, &dat, len, 100) != HAL_OK){
		err_handle();
	}
}



/////////////////////////////////////////////////////////////////////////////////
// INIT
/////////////////////////////////////////////////////////////////////////////////
void tcs_init() {

	HAL_GPIO_WritePin(A_IO1v8_GPIO_Port, A_IO1v8_Pin, 1);
	HAL_GPIO_WritePin(B_IO1v8_GPIO_Port, B_IO1v8_Pin, 1);
	HAL_GPIO_WritePin(C_IO3v3_GPIO_Port, C_IO3v3_Pin, 1);
	HAL_GPIO_WritePin(D_IO3v3_GPIO_Port, D_IO3v3_Pin, 1);
	HAL_GPIO_WritePin(VDD3v3d_GPIO_Port, VDD3v3d_Pin, 1);
	HAL_GPIO_WritePin(VDD1v2_GPIO_Port, VDD1v2_Pin, 0);
	HAL_GPIO_WritePin(VDD1v8d_GPIO_Port, VDD1v8d_Pin, 0);
	HAL_GPIO_WritePin(VDD1v1_GPIO_Port, VDD1v1_Pin, 1);
	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 0);
	HAL_GPIO_WritePin(INT_GPIO_Port, INT_Pin, 0);

	HAL_Delay(2000);


	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 1);

	HAL_Delay(200);
	HAL_GPIO_WritePin(INT_GPIO_Port, INT_Pin, 1);




	//i2c:  [address + rw] [regaddr_h][regaddr_l] [data_l]..[data_h]

	//datasheet page 62

	i2c_write(devaddr, 0x0004, 0x0004, 2); //W 0x0004 0x0400		0b100					- AutoIndex = 1
	i2c_write(devaddr, 0x0002, 0x3F01, 2); //W 0x0002 0x013F		0b11111100000001		- SLEEP + HdmiRst + CTxRst + CecRst + IRRst + SPLRst + SLMBRst
	HAL_Delay(10);//1ms
	i2c_write(devaddr, 0x0002, 0x0000, 2); //W 0x0002 0x0000		0b0						- Software needs to clear
	i2c_write(devaddr, 0x0006, 0x0008, 2); //W 0x0006 0x0800		0b1000					- Refclk = 1 ; RGB888
	HAL_Delay(1);//0.25ms
	i2c_write(devaddr, 0x8410, 0x03, 1); //W 0x8410 0x03			0b00000011				- PHYCtl = 0 ; ??
	i2c_write(devaddr, 0x8413, 0x3F, 1); //W 0x8413 0x3F			0b00111111				- PHYEnb = 1
	i2c_write(devaddr, 0x84F0, 0x31, 1); //W 0x84F0 0x31			0b00110001				- APPL_ON = 1 ; APLL_CPCTL = 11
	i2c_write(devaddr, 0x84F4, 0x01, 1); //W 0x84F4 0x01			0b1						- DDCPWR
	i2c_write(devaddr, 0x8540, 0x12C0, 2); //W 0x8540 0xC012		0b1001011000000	(4800)	- SYS_FREQ0 = 48MHz
	i2c_write(devaddr, 0x8630, 0x00, 1); //W 0x8630 0x00			0b0
	i2c_write(devaddr, 0x8631, 0x0753, 2); //W 0x8631 0x5307		0b11101010011 (480000)	- LOCK_REF_FREQ = 48MHz
	i2c_write(devaddr, 0x8670, 0x02, 1); //W 0x8670 0x02			0b10					- NCO_F0_MOD = 10
	i2c_write(devaddr, 0x8A0C, 0x12C0, 2); //W 0x8A0C 0xC012		0b1001011000000 (4800)	- SYS_FREQ = 48MHz
	i2c_write(devaddr, 0x8502, 0xFF, 1); //W 0x8502 0xFF			0b11111111				- ALL system interrupt
	i2c_write(devaddr, 0x8512, 0xFE, 1); //W 0x8512 0xFE			0b11111110				- DDC mask OFF
	i2c_write(devaddr, 0x8514, 0x00, 1); //W 0x8514 0x00			0b0						- PACKET INTERRUPT MASK OFF
	i2c_write(devaddr, 0x8515, 0x00, 1); //W 0x8515 0x00			0b0						- CBIT INTERRUPT MASK OFF
	i2c_write(devaddr, 0x8516, 0x00, 1); //W 0x8516 0x00			0b0						- AUDIO INTERRUPT MASK OFF
	i2c_write(devaddr, 0x0014, 0x0FBF, 2); //W 0x0014 0xBF0F		0b111110111111			- clear Interrupt
	i2c_write(devaddr, 0x0016, 0x0FFF, 2); //W 0x0016 0xFF0F		0b111111111111			- Interrupt Mask  - all disabled?
	i2c_write(devaddr, 0x85E0, 0x01, 1); //W 0x85E0 0x01			0b1						- EDID_MODE = Internal EDID-RAM & DDC2B mode
	i2c_write(devaddr, 0x85E3, 0x0100, 2); //W 0x85E3 0x0001		0b1						- EDID data size stored in RAM = 1
//
//
//	0x8C00 - EDID-RAM ADDRESS
//	see VESA-EEDID-A2.pdf
//		 EDID Header
	i2c_write(devaddr, 0x8C00, 0x00, 1); //W 0x8C00 0x00			0b0
	i2c_write(devaddr, 0x8C01, 0xFF, 1); //W 0x8C01 0xFF			0b11111111
	i2c_write(devaddr, 0x8C02, 0xFF, 1); //W 0x8C02 0xFF			0b11111111
	i2c_write(devaddr, 0x8C03, 0xFF, 1); //W 0x8C03 0xFF			0b11111111
	i2c_write(devaddr, 0x8C04, 0xFF, 1); //W 0x8C04 0xFF			0b11111111
	i2c_write(devaddr, 0x8C05, 0xFF, 1); //W 0x8C05 0xFF			0b11111111
	i2c_write(devaddr, 0x8C06, 0xFF, 1); //W 0x8C06 0xFF			0b11111111
	i2c_write(devaddr, 0x8C07, 0x00, 1); //W 0x8C07 0x00			0b0
//		ID Manufacturer Name
	i2c_write(devaddr, 0x8C08, 0x22, 1); //W 0x8C08 0x33			0b00110011
	i2c_write(devaddr, 0x8C09, 0xD2, 1); //W 0x8C09 0x54			0b01010100			0b0 01100 11010 10100  - 12 26 20 - "LZT"
//
//	A B C D E F G H I J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z
//	1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
//
//
//		ID Product Code
	i2c_write(devaddr, 0x8C0A, 0x01, 1); //W 0x8C0A 0x01			0b1
	i2c_write(devaddr, 0x8C0B, 0x00, 1); //W 0x8C0B 0x00			0b0						- 1
//		ID Serial Number
	i2c_write(devaddr, 0x8C0C, 0x00, 1); //W 0x8C0C 0x00			0b0
	i2c_write(devaddr, 0x8C0D, 0x00, 1); //W 0x8C0D 0x00			0b0
	i2c_write(devaddr, 0x8C0E, 0x00, 1); //W 0x8C0E 0x00			0b0
	i2c_write(devaddr, 0x8C0F, 0x00, 1); //W 0x8C0F 0x00			0b0						- 0
//		Week of Manufacture or Model Year Flag
	i2c_write(devaddr, 0x8C10, 0x0C, 1); //W 0x8C10 0x0C			0b1100					- 12 week
	i2c_write(devaddr, 0x8C11, 0x1B, 1); //W 0x8C11 0x1B			0b11011					- 17 year
//		EDID Structure Version and Revision Numbers
	i2c_write(devaddr, 0x8C12, 0x01, 1); //W 0x8C12 0x01			0b1						- !
	i2c_write(devaddr, 0x8C13, 0x03, 1); //W 0x8C13 0x03			0b11					- !!! (needed 0x04)
//		Video Input Definition
	i2c_write(devaddr, 0x8C14, 0x80, 1); //W 0x8C14 0x80			0b10000000				- Color Bit Depth is undefined ; Digital Interface is not defined
//		Horizontal and Vertical Screen Size or Aspect Ratio
	i2c_write(devaddr, 0x8C15, 0x00, 1); //W 0x8C15 0x00			0b0
	i2c_write(devaddr, 0x8C16, 0x00, 1); //W 0x8C16 0x00			0b0						- unknown or undefined
//		Display Transfer Characteristics (GAMMA)
	i2c_write(devaddr, 0x8C17, 0x78, 1); //W 0x8C17 0x78			0b1111000				- 120 (2.2)
//		Feature Support
	i2c_write(devaddr, 0x8C18, 0x0A, 1); //W 0x8C18 0x0A			0b00001010				- multi-mode freq; Preferred Timing Mode ; sRGB default color space; RGB color display
//		Chromaticity and Default White Point
	i2c_write(devaddr, 0x8C19, 0x07, 1); //W 0x8C19 0x07			0b111					- Rx1=0 Rx0=0 Ry1=0 Ry0=0 Gx1=0 Gx0=1 Gy1=1 Gy0=1
	i2c_write(devaddr, 0x8C1A, 0xF5, 1); //W 0x8C1A 0xF5			0b11110101				- Bx1=1 Bx0=1 By1=1 By0=1 Wx1=0 Wx0=1 Wy1=0 Wy0=1
	i2c_write(devaddr, 0x8C1B, 0x9A, 1); //W 0x8C1B 0x9A			0b10011010				- Red_x
	i2c_write(devaddr, 0x8C1C, 0x56, 1); //W 0x8C1C 0x56			0b1010110				- Red_y
	i2c_write(devaddr, 0x8C1D, 0x4E, 1); //W 0x8C1D 0x4E			0b1001110				- Green_x
	i2c_write(devaddr, 0x8C1E, 0x86, 1); //W 0x8C1E 0x86									- Green_y
	i2c_write(devaddr, 0x8C1F, 0x26, 1); //W 0x8C1F 0x26									- Blue_x
	i2c_write(devaddr, 0x8C20, 0x1E, 1); //W 0x8C20 0x1E									- Blue_y
	i2c_write(devaddr, 0x8C21, 0x50, 1); //W 0x8C21 0x50									- White_x
	i2c_write(devaddr, 0x8C22, 0x54, 1); //W 0x8C22 0x54									- White_y
//		Established Timings I & II
	i2c_write(devaddr, 0x8C23, 0x00, 1); //W 0x8C23 0x00			0b0						- 800 x 600 @ 60Hz
	i2c_write(devaddr, 0x8C24, 0x00, 1); //W 0x8C24 0x00			0b0						- 1280 x 1024 @ 75Hz
	i2c_write(devaddr, 0x8C25, 0x00, 1); //W 0x8C25 0x00			0b0						- Reserved for Manufacturer Specified Timings
//		Standard Timings
	i2c_write(devaddr, 0x8C26, 0x00, 1); //W 0x8C26 0x00			0b0
	i2c_write(devaddr, 0x8C27, 0x00, 1); //W 0x8C27 0x00			0b0
	i2c_write(devaddr, 0x8C28, 0x00, 1); //W 0x8C28 0x00			0b0
	i2c_write(devaddr, 0x8C29, 0x00, 1); //W 0x8C29 0x00			0b0
	i2c_write(devaddr, 0x8C2A, 0x00, 1); //W 0x8C2A 0x00			0b0
	i2c_write(devaddr, 0x8C2B, 0x00, 1); //W 0x8C2B 0x00			0b0
	i2c_write(devaddr, 0x8C2C, 0x00, 1); //W 0x8C2C 0x00			0b0
	i2c_write(devaddr, 0x8C2D, 0x00, 1); //W 0x8C2D 0x00			0b0
	i2c_write(devaddr, 0x8C2E, 0x00, 1); //W 0x8C2E 0x00			0b0
	i2c_write(devaddr, 0x8C2F, 0x00, 1); //W 0x8C2F 0x00			0b0
	i2c_write(devaddr, 0x8C30, 0x00, 1); //W 0x8C30 0x00			0b0
	i2c_write(devaddr, 0x8C31, 0x00, 1); //W 0x8C31 0x00			0b0
	i2c_write(devaddr, 0x8C32, 0x00, 1); //W 0x8C32 0x00			0b0
	i2c_write(devaddr, 0x8C33, 0x00, 1); //W 0x8C33 0x00			0b0
	i2c_write(devaddr, 0x8C34, 0x00, 1); //W 0x8C34 0x00			0b0
	i2c_write(devaddr, 0x8C35, 0x00, 1); //W 0x8C35 0x00			0b0
//		18 Byte Descriptors
	i2c_write(devaddr, 0x8C36, 0x9C, 1); //W 0x8C36 0x9C
	i2c_write(devaddr, 0x8C37, 0x6A, 1); //W 0x8C37 0x6A
	i2c_write(devaddr, 0x8C38, 0x70, 1); //W 0x8C38 0x70
	i2c_write(devaddr, 0x8C39, 0x56, 1); //W 0x8C39 0x56
	i2c_write(devaddr, 0x8C3A, 0x81, 1); //W 0x8C3A 0x81
	i2c_write(devaddr, 0x8C3B, 0xB0, 1); //W 0x8C3B 0xB0
	i2c_write(devaddr, 0x8C3C, 0x0C, 1); //W 0x8C3C 0x0C
	i2c_write(devaddr, 0x8C3D, 0x40, 1); //W 0x8C3D 0x40
	i2c_write(devaddr, 0x8C3E, 0x5C, 1); //W 0x8C3E 0x5C
	i2c_write(devaddr, 0x8C3F, 0x05, 1); //W 0x8C3F 0x05
	i2c_write(devaddr, 0x8C40, 0x63, 1); //W 0x8C40 0x63
	i2c_write(devaddr, 0x8C41, 0x00, 1); //W 0x8C41 0x00			0b0
	i2c_write(devaddr, 0x8C42, 0x5A, 1); //W 0x8C42 0x5A
	i2c_write(devaddr, 0x8C43, 0xA0, 1); //W 0x8C43 0xA0
	i2c_write(devaddr, 0x8C44, 0x00, 1); //W 0x8C44 0x00			0b0
	i2c_write(devaddr, 0x8C45, 0x00, 1); //W 0x8C45 0x00			0b0
	i2c_write(devaddr, 0x8C46, 0x00, 1); //W 0x8C46 0x00			0b0
	i2c_write(devaddr, 0x8C47, 0x18, 1); //W 0x8C47 0x18
	i2c_write(devaddr, 0x8C48, 0x00, 1); //W 0x8C48 0x00			0b0
	i2c_write(devaddr, 0x8C49, 0x00, 1); //W 0x8C49 0x00			0b0
	i2c_write(devaddr, 0x8C4A, 0x00, 1); //W 0x8C4A 0x00			0b0
	i2c_write(devaddr, 0x8C4B, 0xFC, 1); //W 0x8C4B 0xFC
	i2c_write(devaddr, 0x8C4C, 0x00, 1); //W 0x8C4C 0x00			0b0
	i2c_write(devaddr, 0x8C4D, 0x33, 1); //W 0x8C4D 0x33
	i2c_write(devaddr, 0x8C4E, 0x38, 1); //W 0x8C4E 0x38
	i2c_write(devaddr, 0x8C4F, 0x31, 1); //W 0x8C4F 0x31
	i2c_write(devaddr, 0x8C50, 0x20, 1); //W 0x8C50 0x20
	i2c_write(devaddr, 0x8C51, 0x20, 1); //W 0x8C51 0x20
	i2c_write(devaddr, 0x8C52, 0x20, 1); //W 0x8C52 0x20
	i2c_write(devaddr, 0x8C53, 0x20, 1); //W 0x8C53 0x20
	i2c_write(devaddr, 0x8C54, 0x20, 1); //W 0x8C54 0x20
	i2c_write(devaddr, 0x8C55, 0x20, 1); //W 0x8C55 0x20
	i2c_write(devaddr, 0x8C56, 0x20, 1); //W 0x8C56 0x20
	i2c_write(devaddr, 0x8C57, 0x20, 1); //W 0x8C57 0x20
	i2c_write(devaddr, 0x8C58, 0x20, 1); //W 0x8C58 0x20
	i2c_write(devaddr, 0x8C59, 0x20, 1); //W 0x8C59 0x20
	i2c_write(devaddr, 0x8C5A, 0x00, 1); //W 0x8C5A 0x00			0b0
	i2c_write(devaddr, 0x8C5B, 0x00, 1); //W 0x8C5B 0x00			0b0
	i2c_write(devaddr, 0x8C5C, 0x00, 1); //W 0x8C5C 0x00			0b0
	i2c_write(devaddr, 0x8C5D, 0xFF, 1); //W 0x8C5D 0xFF
	i2c_write(devaddr, 0x8C5E, 0x00, 1); //W 0x8C5E 0x00
	i2c_write(devaddr, 0x8C5F, 0x30, 1); //W 0x8C5F 0x30
	i2c_write(devaddr, 0x8C60, 0x30, 1); //W 0x8C60 0x30
	i2c_write(devaddr, 0x8C61, 0x30, 1); //W 0x8C61 0x30
	i2c_write(devaddr, 0x8C62, 0x30, 1); //W 0x8C62 0x30
	i2c_write(devaddr, 0x8C63, 0x30, 1); //W 0x8C63 0x30
	i2c_write(devaddr, 0x8C64, 0x30, 1); //W 0x8C64 0x30
	i2c_write(devaddr, 0x8C65, 0x30, 1); //W 0x8C65 0x30
	i2c_write(devaddr, 0x8C66, 0x30, 1); //W 0x8C66 0x30
	i2c_write(devaddr, 0x8C67, 0x20, 1); //W 0x8C67 0x20
	i2c_write(devaddr, 0x8C68, 0x20, 1); //W 0x8C68 0x20
	i2c_write(devaddr, 0x8C69, 0x20, 1); //W 0x8C69 0x20
	i2c_write(devaddr, 0x8C6A, 0x20, 1); //W 0x8C6A 0x20
	i2c_write(devaddr, 0x8C6B, 0x20, 1); //W 0x8C6B 0x20
	i2c_write(devaddr, 0x8C6C, 0x00, 1); //W 0x8C6C 0x00
	i2c_write(devaddr, 0x8C6D, 0x00, 1); //W 0x8C6D 0x00
	i2c_write(devaddr, 0x8C6E, 0x00, 1); //W 0x8C6E 0x00
	i2c_write(devaddr, 0x8C6F, 0xFD, 1); //W 0x8C6F 0xFD
	i2c_write(devaddr, 0x8C70, 0x00, 1); //W 0x8C70 0x00
	i2c_write(devaddr, 0x8C71, 0x17, 1); //W 0x8C71 0x17
	i2c_write(devaddr, 0x8C72, 0x4B, 1); //W 0x8C72 0x4B
	i2c_write(devaddr, 0x8C73, 0x0F, 1); //W 0x8C73 0x0F
	i2c_write(devaddr, 0x8C74, 0xF0, 1); //W 0x8C74 0xF0
	i2c_write(devaddr, 0x8C75, 0x1E, 1); //W 0x8C75 0x1E
	i2c_write(devaddr, 0x8C76, 0x00, 1); //W 0x8C76 0x00
	i2c_write(devaddr, 0x8C77, 0x0A, 1); //W 0x8C77 0x0A
	i2c_write(devaddr, 0x8C78, 0x20, 1); //W 0x8C78 0x20
	i2c_write(devaddr, 0x8C79, 0x20, 1); //W 0x8C79 0x20
	i2c_write(devaddr, 0x8C7A, 0x20, 1); //W 0x8C7A 0x20
	i2c_write(devaddr, 0x8C7B, 0x20, 1); //W 0x8C7B 0x20
	i2c_write(devaddr, 0x8C7C, 0x20, 1); //W 0x8C7C 0x20
	i2c_write(devaddr, 0x8C7D, 0x20, 1); //W 0x8C7D 0x20
	i2c_write(devaddr, 0x8C7E, 0x01, 1); //W 0x8C7E 0x01
	i2c_write(devaddr, 0x8C7F, 0xDF, 1); //W 0x8C7F 0x4C  //checksumm
	i2c_write(devaddr, 0x8C80, 0x02, 1); //W 0x8C80 0x02
	i2c_write(devaddr, 0x8C81, 0x03, 1); //W 0x8C81 0x03
	i2c_write(devaddr, 0x8C82, 0x17, 1); //W 0x8C82 0x17
	i2c_write(devaddr, 0x8C83, 0x74, 1); //W 0x8C83 0x74
	i2c_write(devaddr, 0x8C84, 0x47, 1); //W 0x8C84 0x47
	i2c_write(devaddr, 0x8C85, 0x00, 1); //W 0x8C85 0x00
	i2c_write(devaddr, 0x8C86, 0x00, 1); //W 0x8C86 0x00
	i2c_write(devaddr, 0x8C87, 0x00, 1); //W 0x8C87 0x00
	i2c_write(devaddr, 0x8C88, 0x00, 1); //W 0x8C88 0x00
	i2c_write(devaddr, 0x8C89, 0x00, 1); //W 0x8C89 0x00
	i2c_write(devaddr, 0x8C8A, 0x00, 1); //W 0x8C8A 0x00
	i2c_write(devaddr, 0x8C8B, 0x00, 1); //W 0x8C8B 0x00
	i2c_write(devaddr, 0x8C8C, 0x23, 1); //W 0x8C8C 0x23
	i2c_write(devaddr, 0x8C8D, 0x09, 1); //W 0x8C8D 0x09
	i2c_write(devaddr, 0x8C8E, 0x7F, 1); //W 0x8C8E 0x7F
	i2c_write(devaddr, 0x8C8F, 0x07, 1); //W 0x8C8F 0x07
	i2c_write(devaddr, 0x8C90, 0x66, 1); //W 0x8C90 0x66
	i2c_write(devaddr, 0x8C91, 0x03, 1); //W 0x8C91 0x03
	i2c_write(devaddr, 0x8C92, 0x0C, 1); //W 0x8C92 0x0C
	i2c_write(devaddr, 0x8C93, 0x00, 1); //W 0x8C93 0x00
	i2c_write(devaddr, 0x8C94, 0x30, 1); //W 0x8C94 0x30
	i2c_write(devaddr, 0x8C95, 0x00, 1); //W 0x8C95 0x00
	i2c_write(devaddr, 0x8C96, 0x80, 1); //W 0x8C96 0x80
	i2c_write(devaddr, 0x8C97, 0x9C, 1); //W 0x8C97 0x9C
	i2c_write(devaddr, 0x8C98, 0x6A, 1); //W 0x8C98 0x6A
	i2c_write(devaddr, 0x8C99, 0x70, 1); //W 0x8C99 0x70
	i2c_write(devaddr, 0x8C9A, 0x56, 1); //W 0x8C9A 0x56
	i2c_write(devaddr, 0x8C9B, 0x81, 1); //W 0x8C9B 0x81
	i2c_write(devaddr, 0x8C9C, 0xB0, 1); //W 0x8C9C 0xB0
	i2c_write(devaddr, 0x8C9D, 0x0C, 1); //W 0x8C9D 0x0C
	i2c_write(devaddr, 0x8C9E, 0x40, 1); //W 0x8C9E 0x40
	i2c_write(devaddr, 0x8C9F, 0x5C, 1); //W 0x8C9F 0x5C
	i2c_write(devaddr, 0x8CA0, 0x05, 1); //W 0x8CA0 0x05
	i2c_write(devaddr, 0x8CA1, 0x63, 1); //W 0x8CA1 0x63
	i2c_write(devaddr, 0x8CA2, 0x00, 1); //W 0x8CA2 0x00
	i2c_write(devaddr, 0x8CA3, 0x5A, 1); //W 0x8CA3 0x5A
	i2c_write(devaddr, 0x8CA4, 0xA0, 1); //W 0x8CA4 0xA0
	i2c_write(devaddr, 0x8CA5, 0x00, 1); //W 0x8CA5 0x00
	i2c_write(devaddr, 0x8CA6, 0x00, 1); //W 0x8CA6 0x00
	i2c_write(devaddr, 0x8CA7, 0x00, 1); //W 0x8CA7 0x00
	i2c_write(devaddr, 0x8CA8, 0x18, 1); //W 0x8CA8 0x18
	i2c_write(devaddr, 0x8CA9, 0x9C, 1); //W 0x8CA9 0x9C
	i2c_write(devaddr, 0x8CAA, 0x6A, 1); //W 0x8CAA 0x6A
	i2c_write(devaddr, 0x8CAB, 0x70, 1); //W 0x8CAB 0x70
	i2c_write(devaddr, 0x8CAC, 0x56, 1); //W 0x8CAC 0x56
	i2c_write(devaddr, 0x8CAD, 0x81, 1); //W 0x8CAD 0x81
	i2c_write(devaddr, 0x8CAE, 0xB0, 1); //W 0x8CAE 0xB0
	i2c_write(devaddr, 0x8CAF, 0x0C, 1); //W 0x8CAF 0x0C
	i2c_write(devaddr, 0x8CB0, 0x40, 1); //W 0x8CB0 0x40
	i2c_write(devaddr, 0x8CB1, 0x5C, 1); //W 0x8CB1 0x5C
	i2c_write(devaddr, 0x8CB2, 0x05, 1); //W 0x8CB2 0x05
	i2c_write(devaddr, 0x8CB3, 0x63, 1); //W 0x8CB3 0x63
	i2c_write(devaddr, 0x8CB4, 0x00, 1); //W 0x8CB4 0x00
	i2c_write(devaddr, 0x8CB5, 0x5A, 1); //W 0x8CB5 0x5A
	i2c_write(devaddr, 0x8CB6, 0xA0, 1); //W 0x8CB6 0xA0
	i2c_write(devaddr, 0x8CB7, 0x00, 1); //W 0x8CB7 0x00
	i2c_write(devaddr, 0x8CB8, 0x00, 1); //W 0x8CB8 0x00
	i2c_write(devaddr, 0x8CB9, 0x00, 1); //W 0x8CB9 0x00
	i2c_write(devaddr, 0x8CBA, 0x18, 1); //W 0x8CBA 0x18
	i2c_write(devaddr, 0x8CBB, 0x9C, 1); //W 0x8CBB 0x9C
	i2c_write(devaddr, 0x8CBC, 0x6A, 1); //W 0x8CBC 0x6A
	i2c_write(devaddr, 0x8CBD, 0x70, 1); //W 0x8CBD 0x70
	i2c_write(devaddr, 0x8CBE, 0x56, 1); //W 0x8CBE 0x56
	i2c_write(devaddr, 0x8CBF, 0x81, 1); //W 0x8CBF 0x81
	i2c_write(devaddr, 0x8CC0, 0xB0, 1); //W 0x8CC0 0xB0
	i2c_write(devaddr, 0x8CC1, 0x0C, 1); //W 0x8CC1 0x0C
	i2c_write(devaddr, 0x8CC2, 0x40, 1); //W 0x8CC2 0x40
	i2c_write(devaddr, 0x8CC3, 0x5C, 1); //W 0x8CC3 0x5C
	i2c_write(devaddr, 0x8CC4, 0x05, 1); //W 0x8CC4 0x05
	i2c_write(devaddr, 0x8CC5, 0x63, 1); //W 0x8CC5 0x63
	i2c_write(devaddr, 0x8CC6, 0x00, 1); //W 0x8CC6 0x00
	i2c_write(devaddr, 0x8CC7, 0x5A, 1); //W 0x8CC7 0x5A
	i2c_write(devaddr, 0x8CC8, 0xA0, 1); //W 0x8CC8 0xA0
	i2c_write(devaddr, 0x8CC9, 0x00, 1); //W 0x8CC9 0x00
	i2c_write(devaddr, 0x8CCA, 0x00, 1); //W 0x8CCA 0x00
	i2c_write(devaddr, 0x8CCB, 0x00, 1); //W 0x8CCB 0x00
	i2c_write(devaddr, 0x8CCC, 0x18, 1); //W 0x8CCC 0x18
	i2c_write(devaddr, 0x8CCD, 0x9C, 1); //W 0x8CCD 0x9C
	i2c_write(devaddr, 0x8CCE, 0x6A, 1); //W 0x8CCE 0x6A
	i2c_write(devaddr, 0x8CCF, 0x70, 1); //W 0x8CCF 0x70
	i2c_write(devaddr, 0x8CD0, 0x56, 1); //W 0x8CD0 0x56
	i2c_write(devaddr, 0x8CD1, 0x81, 1); //W 0x8CD1 0x81
	i2c_write(devaddr, 0x8CD2, 0xB0, 1); //W 0x8CD2 0xB0
	i2c_write(devaddr, 0x8CD3, 0x0C, 1); //W 0x8CD3 0x0C
	i2c_write(devaddr, 0x8CD4, 0x40, 1); //W 0x8CD4 0x40
	i2c_write(devaddr, 0x8CD5, 0x5C, 1); //W 0x8CD5 0x5C
	i2c_write(devaddr, 0x8CD6, 0x05, 1); //W 0x8CD6 0x05
	i2c_write(devaddr, 0x8CD7, 0x63, 1); //W 0x8CD7 0x63
	i2c_write(devaddr, 0x8CD8, 0x00, 1); //W 0x8CD8 0x00
	i2c_write(devaddr, 0x8CD9, 0x5A, 1); //W 0x8CD9 0x5A
	i2c_write(devaddr, 0x8CDA, 0xA0, 1); //W 0x8CDA 0xA0
	i2c_write(devaddr, 0x8CDB, 0x00, 1); //W 0x8CDB 0x00
	i2c_write(devaddr, 0x8CDC, 0x00, 1); //W 0x8CDC 0x00
	i2c_write(devaddr, 0x8CDD, 0x00, 1); //W 0x8CDD 0x00
	i2c_write(devaddr, 0x8CDE, 0x18, 1); //W 0x8CDE 0x18
	i2c_write(devaddr, 0x8CDF, 0x9C, 1); //W 0x8CDF 0x9C
	i2c_write(devaddr, 0x8CE0, 0x6A, 1); //W 0x8CE0 0x6A
	i2c_write(devaddr, 0x8CE1, 0x70, 1); //W 0x8CE1 0x70
	i2c_write(devaddr, 0x8CE2, 0x56, 1); //W 0x8CE2 0x56
	i2c_write(devaddr, 0x8CE3, 0x81, 1); //W 0x8CE3 0x81
	i2c_write(devaddr, 0x8CE4, 0xB0, 1); //W 0x8CE4 0xB0
	i2c_write(devaddr, 0x8CE5, 0x0C, 1); //W 0x8CE5 0x0C
	i2c_write(devaddr, 0x8CE6, 0x40, 1); //W 0x8CE6 0x40
	i2c_write(devaddr, 0x8CE7, 0x5C, 1); //W 0x8CE7 0x5C
	i2c_write(devaddr, 0x8CE8, 0x05, 1); //W 0x8CE8 0x05
	i2c_write(devaddr, 0x8CE9, 0x63, 1); //W 0x8CE9 0x63
	i2c_write(devaddr, 0x8CEA, 0x00, 1); //W 0x8CEA 0x00
	i2c_write(devaddr, 0x8CEB, 0x5A, 1); //W 0x8CEB 0x5A
	i2c_write(devaddr, 0x8CEC, 0xA0, 1); //W 0x8CEC 0xA0
	i2c_write(devaddr, 0x8CED, 0x00, 1); //W 0x8CED 0x00
	i2c_write(devaddr, 0x8CEE, 0x00, 1); //W 0x8CEE 0x00
	i2c_write(devaddr, 0x8CEF, 0x00, 1); //W 0x8CEF 0x00
	i2c_write(devaddr, 0x8CF0, 0x18, 1); //W 0x8CF0 0x18
	i2c_write(devaddr, 0x8CF1, 0x00, 1); //W 0x8CF1 0x00
	i2c_write(devaddr, 0x8CF2, 0x00, 1); //W 0x8CF2 0x00
	i2c_write(devaddr, 0x8CF3, 0x00, 1); //W 0x8CF3 0x00
	i2c_write(devaddr, 0x8CF4, 0x00, 1); //W 0x8CF4 0x00
	i2c_write(devaddr, 0x8CF5, 0x00, 1); //W 0x8CF5 0x00
	i2c_write(devaddr, 0x8CF6, 0x00, 1); //W 0x8CF6 0x00
	i2c_write(devaddr, 0x8CF7, 0x00, 1); //W 0x8CF7 0x00
	i2c_write(devaddr, 0x8CF8, 0x00, 1); //W 0x8CF8 0x00
	i2c_write(devaddr, 0x8CF9, 0x00, 1); //W 0x8CF9 0x00
	i2c_write(devaddr, 0x8CFA, 0x00, 1); //W 0x8CFA 0x00
	i2c_write(devaddr, 0x8CFB, 0x00, 1); //W 0x8CFB 0x00
	i2c_write(devaddr, 0x8CFC, 0x00, 1); //W 0x8CFC 0x00
	i2c_write(devaddr, 0x8CFD, 0x00, 1); //W 0x8CFD 0x00
	i2c_write(devaddr, 0x8CFE, 0x00, 1); //W 0x8CFE 0x00
	i2c_write(devaddr, 0x8CFF, 0xB7, 1); //W 0x8CFF 0xB7

	/// END EEDID

//
//	i2c_write(devaddr, 0x85D1, 0x01, 1);//	W 0x85D1 0x01 					-	What o_O??
//	i2c_write(devaddr, 0x8560, 0x24, 1);//	W 0x8560 0x24 					-	HDCP MODE		(Default) Automatic authentication mode 0
//	i2c_write(devaddr, 0x8563, 0x11, 1);//	W 0x8563 0x11 					-	What o_O??
	i2c_write(devaddr, 0x8564, 0x0F, 1);//	W 0x8564 0x0F 					-	What o_O??
	//// audio
	i2c_write(devaddr, 0x8A02, 0x42, 1);//	W 0x8A02 0x42 					-	OUT_SYNC0 		(Default) Mode2
	i2c_write(devaddr, 0x8543, 0x02, 1);//	W 0x8543 0x02 					-	DDC_CTL			(Default)
	i2c_write(devaddr, 0x8544, 0x11, 1);//	W 0x8544 0x11 					-	HPD_CTL			HOTPLUG = “H”   DDC5V detection interlock
	i2c_write(devaddr, 0x8600, 0x00, 1);//	W 0x8600 0x00 					-	FORCE_MUTE		AMUTEOUT = Mute OFF   data MUTE control = Mute OFF
	i2c_write(devaddr, 0x8602, 0xF3, 1);//	W 0x8602 0xF3 					-	Mute_Auto		(Default)
	i2c_write(devaddr, 0x8603, 0x02, 1);//	W 0x8603 0x02 					-	UTO_CMD1		(Default)
	i2c_write(devaddr, 0x8604, 0x0C, 1);//	W 0x8604 0x0C 					-	UTO_CMD2		(Default)
	i2c_write(devaddr, 0x8606, 0x05, 1);//	W 0x8606 0x05 					-	BUFINIT_START	(Default)
	i2c_write(devaddr, 0x8607, 0x00, 1);//	W 0x8607 0x00 					-	FS_MUTE			Do not Mute (ALL)
	i2c_write(devaddr, 0x8652, 0x02, 1);//	W 0x8652 0x02 					-	SDO_MODE1		16bit  LRCK = 768 kHz standard I2S
	i2c_write(devaddr, 0x8671, 0x020C49BA, 4);//	W 0x8671 0xBA490C02		-	AUDIO PLL Setting Register
	i2c_write(devaddr, 0x8675, 0x01E1B089, 4);//	W 0x8675 0x89B0E101		-	AUDIO PLL Setting Register

	i2c_write(devaddr, 0x854A, 0x01, 1);//	W 0x854A 0x01					-	INIT_END
//
//	W 0x8520 R 0x00
//
//	W 0x8520 R 0x01


}


uint8_t tcs_HDMIStatus(){ // check connect
	uint8_t result = 0;
	// W 0x8520 R 0x00
	uint16_t addr = 0x8520;
	uint8_t data = 0;
	if(HAL_I2C_Mem_Read(&hi2c1, devaddr<<1, addr, 2, &data, 1, 100)!= HAL_OK){
		err_handle();
	}

	// 8f -> 1
	return data;
}

void tcs_initDisplay(){


	HAL_GPIO_WritePin(VDD3v3d_GPIO_Port, VDD3v3d_Pin, 0);
	HAL_Delay(200);
	HAL_GPIO_WritePin(VDD1v8d_GPIO_Port, VDD1v8d_Pin, 1);
	HAL_GPIO_WritePin(VDD1v2_GPIO_Port, VDD1v2_Pin, 1);

	HAL_Delay(200);
	HAL_GPIO_WritePin(A_IO1v8_GPIO_Port, A_IO1v8_Pin, 0);
	HAL_GPIO_WritePin(B_IO1v8_GPIO_Port, B_IO1v8_Pin, 0);
	HAL_GPIO_WritePin(C_IO3v3_GPIO_Port, C_IO3v3_Pin, 1);
	HAL_GPIO_WritePin(D_IO3v3_GPIO_Port, D_IO3v3_Pin, 1);
	HAL_Delay(200);

	i2c_write(devaddr, 0x0004, 0x0004, 2);		//AutoIndex
	i2c_write(devaddr, 0x0002, 0x1200, 2);		//DSI-TX Software Reset    Audio Block Software Reset
	HAL_Delay(10);
	i2c_write(devaddr, 0x0002, 0x0000, 2);		//disable rst bit
	i2c_write(devaddr, 0x0006, 0x0008, 2);		//Refclk = 1
	i2c_write(devaddr, 0x0108, 0x00000001, 4);	//DSITXEn = 1
	i2c_write(devaddr, 0x010C, 0x00000001, 4);	//PPIHsTxClkEn = 1
	i2c_write(devaddr, 0x02A0, 0x00000001, 4);	//
	i2c_write(devaddr, 0x02AC, 0x000090B5, 4);	//MIPI_PLL_CONF
	HAL_Delay(20);
	////////// DSI 0
	i2c_write(devaddr, 0x02A0, 0x00000003, 4);	//
	i2c_write(devaddr, 0x0118, 0x00000014, 4);	// Data Lane 0, 1, 2 and 3 are enabled.   CLaneEn = 1
	i2c_write(devaddr, 0x0120, 0x0000178D, 4);	// LINEINITCNT = 0x178D
	i2c_write(devaddr, 0x0124, 0x00000000, 4);	// HSToCnt = 0
	i2c_write(devaddr, 0x0128, 0x00000101, 4);	// VHDelayEn = 1   IndModeSel = 1
	i2c_write(devaddr, 0x0130, 0x00010000, 4);	//
	i2c_write(devaddr, 0x0134, 0x00005000, 4);	//
	i2c_write(devaddr, 0x0138, 0x00010000, 4);	//
	i2c_write(devaddr, 0x013C, 0x00010000, 4);	// DSI_PRESP_LPW_COUNT
	i2c_write(devaddr, 0x0140, 0x00010000, 4);	// DSI_PRESP_HSR_COUNT
	i2c_write(devaddr, 0x0144, 0x00010000, 4);	// DSI_PRESP_HSW_COUNT
	i2c_write(devaddr, 0x0148, 0x00001000, 4);	//
	i2c_write(devaddr, 0x014C, 0x00010000, 4);	//
	i2c_write(devaddr, 0x0150, 0x00000161, 4);	// EoTpEn = 1 HsCkMd = 1 CrcDis = 1 ECCDis = 1
	i2c_write(devaddr, 0x0154, 0x00000001, 4);	// RXVC0_EN = 1
	i2c_write(devaddr, 0x0158, 0x000000C8, 4);	// IND_TO_COUNT
	i2c_write(devaddr, 0x0168, 0x0000002A, 4);	//
	i2c_write(devaddr, 0x0170, 0x000003DA, 4);	// APF_VDELAYCNT
	i2c_write(devaddr, 0x017C, 0x00000081, 4);	// DSITXMd = 1   BlankPkt_En = 1
	i2c_write(devaddr, 0x018C, 0x00000009, 4);	// DSI_HSYNC_WIDTH    5?
	i2c_write(devaddr, 0x0190, 0x00000192, 4);	// DSI_HBPR 	90?
	i2c_write(devaddr, 0x01A4, 0x00000000, 4);	// DSI_RX_STATE_INT_MASK  = NoMask
	i2c_write(devaddr, 0x01C0, 0x00000015, 4);	// DSI_LPRX_THRESH_COUNT
	i2c_write(devaddr, 0x0214, 0x00000000, 4);	// APP_SIDE_ERR_INT_MASK  = NoMask
	i2c_write(devaddr, 0x021C, 0x00000080, 4);	// DSI_RX_ERR_INT_MASK  = Reserved (1)
	i2c_write(devaddr, 0x0224, 0x00000000, 4);	// DSI_LPTX_INT_MASK    = NoMask
	i2c_write(devaddr, 0x0254, 0x00000006, 4);	// PPI_DPHY_LPTXTIMECNT
	i2c_write(devaddr, 0x0258, 0x00270305, 4);	// PPI_DPHY_TCLK_HEADERCNT
	i2c_write(devaddr, 0x025C, 0x000D000A, 4);	// PPI_DPHY_TCLK_TRAILCNT
	i2c_write(devaddr, 0x0260, 0x00120008, 4);	// PPI_DPHY_THS_HEADERCNT
	i2c_write(devaddr, 0x0264, 0x0000434B, 4);	// PPI_DPHY_TWAKEUPCNT
	i2c_write(devaddr, 0x0268, 0x0000000E, 4);	// PPI_DPHY_TCLK_POSTCNT
	i2c_write(devaddr, 0x026C, 0x000D0009, 4);	// PPI_DPHY_THSTRAILCNT
	i2c_write(devaddr, 0x0270, 0x00000020, 4);	// PPI_DPHY_HSTXVREGCNT (TX Voltage Regulator setup Wait Counter)
	i2c_write(devaddr, 0x0274, 0x0000001F, 4);	// PPI_DPHY_HSTXVREGEN
	i2c_write(devaddr, 0x0278, 0x00060008, 4);	// PPI_DSI_BTA_COUNT
	i2c_write(devaddr, 0x027C, 0x00000002, 4);	// PPI_DPHYTX_ADJUST  D0S_LPTXCURREN = 25% (default)
	i2c_write(devaddr, 0x0288, 0x000002AA, 4);	// PPI_DPHY_CAP (default)
	i2c_write(devaddr, 0x011C, 0x00000001, 4);	// DSITX_START
	////////// DSI 1
	i2c_write(devaddr, 0x0308, 0x00000001, 4);	//
	i2c_write(devaddr, 0x030C, 0x00000001, 4);	//
	i2c_write(devaddr, 0x04A0, 0x00000001, 4);	//
	i2c_write(devaddr, 0x04AC, 0x000090B5, 4);	//
	HAL_Delay(20);
	i2c_write(devaddr, 0x04A0, 0x00000003, 4);	//
	i2c_write(devaddr, 0x0318, 0x00000014, 4);	//
	i2c_write(devaddr, 0x0320, 0x0000178D, 4);	//
	i2c_write(devaddr, 0x0324, 0x00000000, 4);	//
	i2c_write(devaddr, 0x0328, 0x00000101, 4);	//
	i2c_write(devaddr, 0x0330, 0x00010000, 4);	//
	i2c_write(devaddr, 0x0334, 0x00005000, 4);	//
	i2c_write(devaddr, 0x0338, 0x00010000, 4);	//
	i2c_write(devaddr, 0x033C, 0x00010000, 4);	//
	i2c_write(devaddr, 0x0340, 0x00010000, 4);	//
	i2c_write(devaddr, 0x0344, 0x00010000, 4);	//
	i2c_write(devaddr, 0x0348, 0x00001000, 4);	//
	i2c_write(devaddr, 0x034C, 0x00010000, 4);	//
	i2c_write(devaddr, 0x0350, 0x00000161, 4);	//
	i2c_write(devaddr, 0x0354, 0x00000001, 4);	//
	i2c_write(devaddr, 0x0358, 0x000000C8, 4);	//
	i2c_write(devaddr, 0x0368, 0x0000002A, 4);	//
	i2c_write(devaddr, 0x0370, 0x000003DA, 4);	//
	i2c_write(devaddr, 0x037C, 0x00000081, 4);	//
	i2c_write(devaddr, 0x038C, 0x00000009, 4);	//
	i2c_write(devaddr, 0x0390, 0x00000192, 4);	//
	i2c_write(devaddr, 0x03A4, 0x00000000, 4);	//
	i2c_write(devaddr, 0x03C0, 0x00000015, 4);	//
	i2c_write(devaddr, 0x0414, 0x00000000, 4);	//
	i2c_write(devaddr, 0x041C, 0x00000080, 4);	//
	i2c_write(devaddr, 0x0424, 0x00000000, 4);	//
	i2c_write(devaddr, 0x0454, 0x00000006, 4);	//
	i2c_write(devaddr, 0x0458, 0x00270305, 4);	//
	i2c_write(devaddr, 0x045C, 0x000D000A, 4);	//
	i2c_write(devaddr, 0x0460, 0x00120008, 4);	//
	i2c_write(devaddr, 0x0464, 0x0000434B, 4);	//
	i2c_write(devaddr, 0x0468, 0x0000000E, 4);	//
	i2c_write(devaddr, 0x046C, 0x000D0009, 4);	//
	i2c_write(devaddr, 0x0470, 0x00000020, 4);	//
	i2c_write(devaddr, 0x0474, 0x0000001F, 4);	//
	i2c_write(devaddr, 0x0478, 0x00060008, 4);	//
	i2c_write(devaddr, 0x047C, 0x00000002, 4);	//
	i2c_write(devaddr, 0x0488, 0x000002AA, 4);	//
	i2c_write(devaddr, 0x031C, 0x00000001, 4);	//

	i2c_write(devaddr, 0x0110, 0x00000016, 4);	// IndMode  HSYNC_POL_SW  VSYNC_POL_SW
	i2c_write(devaddr, 0x0310, 0x00000016, 4);	// IndMode  HSYNC_POL_SW  VSYNC_POL_SW
	HAL_Delay(10);

	i2c_write(devaddr, 0x0500, 0x0004, 2);	//CMD_SEL  (PAGE 30) Select both DSITX0 and DSITX1 I/F
	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0x08FE, 2);	//0xFE -> 0x08

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0x4003, 2);	//??

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0x1007, 2);	//0x07 -> 0x10 (0x1A?)

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0x005D, 2);	//??

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0x005F, 2);	//??

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0x2F89, 2);	//??

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0xFA8A, 2);	//??

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0x108B, 2);	//??

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0x08FE, 2);	//0xFE -> 0x07 ?

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0xFAA9, 2);	//??

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0x00AB, 2);	//??

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0x00AD, 2);	//??

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0x00AF, 2);	//??

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0x0DFE, 2);	//0xFE -> 0x0D ?

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0xFE53, 2);	//??

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0x6502, 2);	//??

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0x00FE, 2);	//0xFE -> 0x00

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0x0135, 2);	//??

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0x0055, 2);	//??

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0xFF51, 2);	//0x51 -> 0xFF

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0x03C2, 2);	//0xC2 -> 0x03

	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0x0000, 2);	//??

	i2c_write(devaddr, 0x0504, 0x0005, 2);	//
	i2c_write(devaddr, 0x0504, 0x0011, 2);	//Sleep Out




//	i2c_write(devaddr, 0x0500, 0x0004, 2);	//CMD_SEL  (PAGE 30)
//	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
//	i2c_write(devaddr, 0x0504, 0x08FE, 2);	//0xFE -> 0x08
////
////	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
////	i2c_write(devaddr, 0x0504, 0x4003, 2);	//??
//
//
//
//
//
//
//
//
//
//
//	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
//	i2c_write(devaddr, 0x0504, 0x1A07, 2);	//
//
//	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
//	i2c_write(devaddr, 0x0504, 0x00FE, 2);	//
//
//	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
//	i2c_write(devaddr, 0x0504, 0x03C2, 2);	//
//
//	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
//	i2c_write(devaddr, 0x0504, 0xFF51, 2);	//
//
//	i2c_write(devaddr, 0x0504, 0x0005, 2);	//
//	i2c_write(devaddr, 0x0504, 0x0011, 2);	//Sleep Out

	HAL_Delay(2000);


	i2c_write(devaddr, 0x0504, 0x0015, 2);	//
	i2c_write(devaddr, 0x0504, 0x0029, 2);	//Display On

	HAL_Delay(400);

	i2c_write(devaddr, 0x5000, 0x0000, 2);	//
	i2c_write(devaddr, 0x5008, 0x0CA8, 2);	//
	i2c_write(devaddr, 0x500C, 0x8000, 2);	//
	i2c_write(devaddr, 0x5080, 0x0000, 2);	//
	i2c_write(devaddr, 0x5088, 0x0CA8, 2);	//
	i2c_write(devaddr, 0x500A, 0x0000, 2);	//
	i2c_write(devaddr, 0x508A, 0x0000, 2);	//
	i2c_write(devaddr, 0x0004, 0x0C37, 2);	//0b110000110111
	i2c_write(devaddr, 0x0006, 0x0000, 2);	//
	i2c_write(devaddr, 0x0110, 0x00000006, 4);	//
	i2c_write(devaddr, 0x0310, 0x00000006, 4);	//


	HAL_Delay(11000);

	DisplayStarted = 1;


}

void tcs_DisplayOff(){

	HAL_GPIO_WritePin(VDD3_3_GPIO_Port, VDD3_3_Pin, 0);  //+

	HAL_GPIO_WritePin(VDD3v3d_GPIO_Port, VDD3v3d_Pin, 0);  //+

	HAL_GPIO_WritePin(VDD1v1_GPIO_Port, VDD1v1_Pin, 1);  //+

	HAL_GPIO_WritePin(VDD1v2_GPIO_Port, VDD1v2_Pin, 0);  //+

//	HAL_GPIO_WritePin(PWR_OLED_GPIO_Port, PWR_OLED_Pin, 1);  //+

//	HAL_GPIO_WritePin(OLED_EN_PWR_GPIO_Port, OLED_EN_PWR_Pin, 0); //+

//	HAL_GPIO_WritePin(VDD1v8d_GPIO_Port, VDD1v8d_Pin, 0);  //+

//	HAL_GPIO_WritePin(BL_PWR_GPIO_Port, BL_PWR_Pin, 0);   //+

	HAL_GPIO_WritePin(A_IO1v8_GPIO_Port, A_IO1v8_Pin, 1);   //+
	HAL_GPIO_WritePin(B_IO1v8_GPIO_Port, B_IO1v8_Pin, 1);   //+
	HAL_GPIO_WritePin(C_IO3v3_GPIO_Port, C_IO3v3_Pin, 1);   //+
	HAL_GPIO_WritePin(D_IO3v3_GPIO_Port, D_IO3v3_Pin, 1);   //+

	i2c_write(devaddr, 0x0504, 0x0005, 2);
	i2c_write(devaddr, 0x0504, 0x0017, 2);
	HAL_Delay(100);
	i2c_write(devaddr, 0x0504, 0x0005, 2);
	i2c_write(devaddr, 0x0504, 0x001C, 2);
	HAL_Delay(50);
	i2c_write(devaddr, 0x0504, 0x0005, 2);
	i2c_write(devaddr, 0x0504, 0x000A, 2);
	HAL_Delay(200);

	HAL_GPIO_WritePin(VDD1v8d_GPIO_Port, VDD1v8d_Pin, 0);


//////////////////

	DisplayStarted = 0;
}

void kernel_init() {

    //////////////////////////////////
    // Hardware Check
//	hi2c1->ErrorCode = HAL_I2C_ERROR_NONE;
//	hi2c1->State = HAL_I2C_STATE_READY;
//	hi2c1->PreviousState = I2C_STATE_NONE;
//	hi2c1->Mode = HAL_I2C_MODE_NONE;


	HAL_GPIO_WritePin(A_IO1v8_GPIO_Port, A_IO1v8_Pin, 1);
	HAL_GPIO_WritePin(B_IO1v8_GPIO_Port, B_IO1v8_Pin, 1);
	HAL_GPIO_WritePin(C_IO3v3_GPIO_Port, C_IO3v3_Pin, 1);
	HAL_GPIO_WritePin(D_IO3v3_GPIO_Port, D_IO3v3_Pin, 1);
	HAL_GPIO_WritePin(VDD3v3d_GPIO_Port, VDD3v3d_Pin, 1);
	HAL_GPIO_WritePin(VDD1v2_GPIO_Port, VDD1v2_Pin, 0);
	HAL_GPIO_WritePin(VDD1v8d_GPIO_Port, VDD1v8d_Pin, 0);
	HAL_GPIO_WritePin(VDD1v1_GPIO_Port, VDD1v1_Pin, 1);

	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 0);
	HAL_GPIO_WritePin(INT_GPIO_Port, INT_Pin, 0);

	HAL_Delay(2000);


	HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, 1);

	HAL_Delay(200);
	HAL_GPIO_WritePin(INT_GPIO_Port, INT_Pin, 1);
	uint16_t addr = 0x0004;
	uint16_t data = 0;
	for(devaddr = 0; devaddr<127; devaddr++){
		if(HAL_I2C_Mem_Read(&hi2c1, (devaddr<<1) | 0b1, addr, 2, &data, 1, 100) == HAL_OK){
			HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, 1);
			break;
		}
	}
	if(devaddr==127) {
		err_handle();
	}



	tcs_init();
//	HAL_I2C_Mem_Read(&hi2c1, devaddr<<1, addr, 2, &data, 2, 100);

//	HAL_I2C_Mem_Read(&hi2c1, devaddr<<1, addr, 2, &data, 1, 1000);









}


/////////////////////////////////////////////////////////////////////////////////
// MAIN
/////////////////////////////////////////////////////////////////////////////////

void kernel_main() {
	HAL_GPIO_WritePin(L13_GPIO_Port, L13_Pin, 1);
	kernel_init();
	HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, 0);
	HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, 0);
    while(1)
    {
    	if (DisplayStarted == 0){
    		if((tcs_HDMIStatus() == 0x8f)|(tcs_HDMIStatus() == 0x9f)){
    			HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, 1);
//    			tcs_init();
//    			HAL_Delay(1000);
    			tcs_initDisplay();
    		}
//    		HAL_Delay(1);
    	}

    	if((tcs_HDMIStatus() & 0b10000000) >0){
    	    HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, 1);
    	}else{
    		HAL_GPIO_WritePin(L1_GPIO_Port, L1_Pin, 0);
    	}

    	if(tcs_HDMIStatus() == 0x9f){
    		HAL_GPIO_WritePin(L13_GPIO_Port, L13_Pin, 0);
    	}else{
    		HAL_GPIO_WritePin(L13_GPIO_Port, L13_Pin, 1);
    	}


    	if (DisplayStarted == 1){
    		// 8f		0b10001111 	[S_SYNC][--][------][------][S_PHY_SCDT][S_PHY_PLL][S_TMDS][S_DDC5V]
    		// 9f		0b10011111 	[S_SYNC][--][------][S_HDMI][S_PHY_SCDT][S_PHY_PLL][S_TMDS][S_DDC5V]
    		// 1f		0b00011111	[------][--][------][S_HDMI][S_PHY_SCDT][S_PHY_PLL][S_TMDS][S_DDC5V]
    		// 0f		0b00001111	[------][--][------][------][S_PHY_SCDT][S_PHY_PLL][S_TMDS][S_DDC5V]
    		// 2f		0b00101111	[------][--][S_HDCP][------][S_PHY_SCDT][S_PHY_PLL][S_TMDS][S_DDC5V]
    		// 29		0b00101001	[------][--][S_HDCP][------][S_PHY_SCDT][---------][------][S_DDC5V]
    		// 28		0b00101000	[------][--][S_HDCP][------][S_PHY_SCDT][---------][------][-------]
    		if((tcs_HDMIStatus() & 0b00000110) == 0){
    			HAL_GPIO_WritePin(L2_GPIO_Port, L2_Pin, 0);
    			tcs_DisplayOff();
//    			HAL_Delay(600);

    	    }
//    	    HAL_Delay(1);
    	}



    }
}



